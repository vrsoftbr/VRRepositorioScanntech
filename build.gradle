plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'br.com.vrsoftware.vrreprocessarscanntech'
version = '0.0.1-SNAPSHOT'

tasks.withType(JavaCompile) {
	options.fork = true
	sourceCompatibility = 21
	targetCompatibility = 21
	options.encoding = 'UTF-8'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacoco {
	toolVersion = "0.8.12"
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}

	compileJava.options.encoding = 'UTF-8'
	compileTestJava.options.encoding = 'UTF-8'
	javadoc.options.encoding = 'UTF-8'
}

repositories {
	maven() {
		name = 'Central repo'
		url = "https://repo1.maven.org/maven2/"
	}
	mavenCentral()
	maven() {
		name = 'VRCommons'
		url = "https://maven.pkg.github.com/vrsoftbr/vrcommons"
		credentials {
			username = project.findProperty("github.user") ?: System.getenv("USERNAME")
			password = project.findProperty("github.token") ?: System.getenv("TOKEN")
		}
	}
}

dependencies {
	implementation 'br.com.vrsoftware:vrcommons:4.0.0-8'
	//configuração para pegar o VRCommons local
	//implementation project(':VRCommons')
	implementation files("lib/VRConnection-4.0.0-1.jar")
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'io.github.cdimascio:java-dotenv:5.2.2'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	compileOnly 'org.projectlombok:lombok'

	//Serialização JSON
	implementation 'com.google.code.gson:gson:2.8.9'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.mockito:mockito-junit-jupiter:5.12.0"
	testImplementation "org.mockito:mockito-inline:5.2.0"
	runtimeOnly 'org.postgresql:postgresql'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
	jvmArgs = [
			'-XX:+EnableDynamicAgentLoading',
			'-Xshare:off'
	]
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = true
		xml.outputLocation = file("${buildDir}/reports/jacoco/jacoco.xml")
		html.outputLocation =  file("${buildDir}/jacocoHTML")
		csv.outputLocation = file("${buildDir}/reports/jacoco/jacoc.csv")
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect { dir ->
					fileTree(dir: dir, exclude: [
							'br/com/vrsoftware/vrreprocessarscanntech/config/**',
							'br/com/vrsoftware/vrreprocessarscanntech/exception/**'
					])
				})
		)
	}

	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit{
				counter = 'BRANCH'
				minimum = 0.00
			}
			limit {
				minimum = 0.00
			}
		}
	}
}